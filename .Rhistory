install.packages('Rcpp')
install.packages('devtools')
install.packages('Rdpack')
speciesList <- paste0('Fraxinus ',
c('americana', 'caroliniana','cuspidata',
'greggii', 'nigra', 'pennsylvanica',
'profunda', 'quadrangulata'))
typeof(speciesList)
speciesList <- 'Fraxinus americana, Fraxinus caroliniana, Fraxinus cuspidata, Fraxinus greggii'
speciesList_text <- as.character(speciesList)
speciesList_text <- as.list(speciesList)
speciesList_text <- strsplit(speciesList, split = ',')
speciesList_text
for (sp in speciesList_text) print(sp)
speciesList_text <- strsplit(speciesList, split = ', ')
for (sp in speciesList_text) print(sp)
print(speciesList_text)
speciesList <- 'Fraxinus americana, Fraxinus caroliniana, Fraxinus cuspidata, Fraxinus greggii, Fraxinus nigra, Fraxinus pennsylvanica, Fraxinus profunda, Fraxinus quadrangulata'
speciesList_text <- strsplit(speciesList, split = ', ')
for (sp in speciesList_text) print(sp)
speciesList_text[1]
as.character(speciesList_text)
speciesList_text <- as.character(speciesList_text)
speciesList_text <- strsplit(speciesList, split = ', ')
type(sp)
typeof(sp)
character(speciesList_text)
as.matrix(speciesList_text)
as.array(speciesList_text)
as.array(speciesList_text)[1]
c(speciesList_text)
c((speciesList_text))
vector(speciesList_text)
unlist(speciesList_text)
genus <- 'fraxinus'
typeof(gens)
typeof(genus)
gcm <- '\ccsm\'
gcm <- \'ccsm\'
''
gcm <-'\'ccsm\''
gsub('\'', '', gcm)
rm(list = ls())
library(data.table)
library(dplyr)
library(xlsx)
library(dismo)
library(geosphere)
library(raster)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(viridis)
## genus constants ##
genus <- 'fagus'
speciesList <- paste0('Fagus ',
c('grandifolia'))
setwd(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/', genus))
ll <- c('longitude', 'latitude')
gcmList <- c('hadley','ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
climYears <- seq(0, -21000, by = -1000)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
# function for masking pollen model by land & ice #
getPollen <- function(times) {
if(!file.exists(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'))) {
maps <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred.tif'))
### mask by glaciers and available land ###
daltonAges <- read.csv('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/Dalton et al 2020 QSR Dates from Shapefile Names.csv')
# mask by land (for visualization) #
for (countTime in seq_along(times)) {
time <- times[countTime]
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm/tifs/',
-1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
}
### mask by ice (for calculating BV) ###
mapsMasked <- maps
for (countTime in seq_along(times)) {
time <- times[countTime]
# ice mask
closestDalton <- which.min(abs(-1000 * daltonAges$calKiloYear - time))
load(paste0('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/RDA Files/daltonEtAl2020_',
sprintf('%.2f', daltonAges$calKiloYear[closestDalton]), '_kiloCalYBP.rda'))
daltonIce <- sp::spTransform(daltonIce, getCRS('albersNA', TRUE))
daltonIce <- rasterize(daltonIce, maps)
daltonIceMask <- calc(daltonIce, fun=function(x) ifelse(is.na(x), 1, NA))
mapsMasked[[countTime]] <- mapsMasked[[countTime]] * daltonIceMask
}
writeRaster(stack(maps),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_landMask.tif'),
format = 'GTiff', overwrite = T)
writeRaster(stack(mapsMasked),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'),
format = 'GTiff', overwrite = T)
}
return(stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif')))
}
library(rnaturalearth)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
gcm <- 'ccsm'
thresholds <- list()
a <- 1
sp <- speciesList[a]
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2",
paste0(substr(sp,1,4), toupper(substr(sub("^\\S+\\s+", '', sp),1,1)),
substr(sub("^\\S+\\s+", '', sp),2,4)))
rangeName <- paste0('littleRange_', gsub('_', '', speciesAb_))
rm(speciesAb, species)
range <- paste0('/Volumes/lj_mac_22/MOBOT/USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
range <- suppressWarnings(shapefile(range))
projection(range) <- enmSdm::getCRS('nad27')
range <- range[range$CODE == 1, ] # remove holes
print(paste0("Species = ", species))
print(paste0("Species = ", sp))
folderName <- paste0('./', genus, '/models/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# load bg sites, records, and rangeMap
load('/Volumes/lj_mac_22/MOBOT/by_genus/background_sites/Random Background Sites across Study Region.Rdata')
paste0('./Models/Maxent/all_model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData')
load(paste0('./models/', speciesAb_, '_Maxent_PC', pc, '_GCM_', gcm, '.rData'))
rm(list = ls())
library(xlsx)
library(enmSdm)
library(geosphere)
library(sp)
library(dismo)
cluster <- F
if (cluster == T) { # constants for running on cluster
args <- commandArgs(TRUE)
gcmList <- args[1]
gcmList <- unlist(gcmList)
genus <- args[2]
genus <- as.character(genus)
speciesList <- args[3]
speciesList <- strsplit(speciesList, split = ', ')
speciesList <- unlist(speciesList)
baseFolder <- '/mnt/research/TIMBER/PVMvsENM/'
setwd('/mnt/research/TIMBER/PVMvsENM')
} else {
## genus constants ##
genus <- 'fraxinus'
speciesList <- paste0('Fraxinus ',
c('americana', 'caroliniana','cuspidata',
'greggii', 'nigra', 'pennsylvanica',
'profunda', 'quadrangulata'))
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
gcmList <- c('hadley', 'ccsm', 'ecbilt') # general circulation models for env data
}
gcm <- 'hadley'
ll <- c('longitude', 'latitude')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
print(paste0("GCM = ", gcm))
a <- 1
sp <- speciesList[1]
print(paste0("Species = ", sp))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2",
paste0(substr(sp,1,4), toupper(substr(sub("^\\S+\\s+", '', sp),1,1)),
substr(sub("^\\S+\\s+", '', sp),2,4)))
rangeName <- paste0('littleRange_', gsub('_', '', speciesAb_))
rm(a)
# load Little range map for given species
if (cluster == T) {
range <- paste0('./USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
} else {
range <- paste0('/Volumes/lj_mac_22/MOBOT/USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
}
range <- suppressWarnings(shapefile(range))
projection(range) <- enmSdm::getCRS('nad27')
range <- range[range$CODE == 1, ] # remove holes
# set constants for retrieving background sites #
bgFileName <- paste0(baseFolder,
'background_sites/Random Background Sites across Study Region.Rdata')
load(bgFileName) # load bg sites in calibration region
modelFileName <- paste0('./models/', speciesAb_, '_Maxent_PC',
pc, '_GCM_', gcm, '.rData')
load(modelFileName) # load model object for given species
rm(list=ls())
load('/Volumes/lj_mac_22/MOBOT/PVMvsENM/workspaces/05 - Modeling Workspace - Frax_Amer Model Output - PC5_GCM_Beyer')
View(bg)
View(bgCalib)
View(bgEnv)
View(records)
# random model evaluations
# author: Lauren Jenkins
# 12 April 2022
# last updated: 6 July 2022
rm(list = ls())
library(xlsx)
library(enmSdm)
library(geosphere)
library(sp)
library(dismo)
cluster <- F
if (cluster == T) { # constants for running on cluster
args <- commandArgs(TRUE)
gcmList <- args[1]
gcmList <- unlist(gcmList)
genus <- args[2]
genus <- as.character(genus)
speciesList <- args[3]
speciesList <- strsplit(speciesList, split = ', ')
speciesList <- unlist(speciesList)
baseFolder <- '/mnt/research/TIMBER/PVMvsENM/'
setwd('/mnt/research/TIMBER/PVMvsENM')
} else {
## genus constants ##
genus <- 'fraxinus'
speciesList <- paste0('Fraxinus ',
c('americana', 'caroliniana','cuspidata',
'greggii', 'nigra', 'pennsylvanica',
'profunda', 'quadrangulata'))
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
gcmList <- c('hadley', 'ccsm', 'ecbilt') # general circulation models for env data
}
ll <- c('longitude', 'latitude')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
gcm <- 'hadley'
sp <- speciesList[1]
print(paste0("GCM = ", gcm))
print(paste0("Species = ", sp))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2",
paste0(substr(sp,1,4), toupper(substr(sub("^\\S+\\s+", '', sp),1,1)),
substr(sub("^\\S+\\s+", '', sp),2,4)))
rangeName <- paste0('littleRange_', gsub('_', '', speciesAb_))
# load Little range map for given species
if (cluster == T) {
range <- paste0('./USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
} else {
range <- paste0('/Volumes/lj_mac_22/MOBOT/USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
}
range <- suppressWarnings(shapefile(range))
projection(range) <- enmSdm::getCRS('nad27')
range <- range[range$CODE == 1, ] # remove holes
# set constants for retrieving background sites #
bgFileName <- paste0(baseFolder,
'background_sites/Random Background Sites across Study Region.Rdata')
load(bgFileName) # load bg sites in calibration region
modelFileName <- paste0('./models/', speciesAb_, '_Maxent_PC',
pc, '_GCM_', gcm, '.rData')
load(modelFileName) # load model object for given species
View(bgCalib)
# model evaluations
# author: Lauren Jenkins
# 12 April 2022
# last updated: 6 July 2022
rm(list = ls())
library(xlsx)
library(enmSdm)
library(geosphere)
library(sp)
library(dismo)
cluster <- F
if (cluster == T) { # constants for running on cluster
args <- commandArgs(TRUE)
evalType <- args[1]
evalType <- as.character(evalType)
gcmList <- args[2]
gcmList <- unlist(gcmList)
genus <- args[3]
genus <- as.character(genus)
speciesList <- args[4]
speciesList <- strsplit(speciesList, split = ', ')
speciesList <- unlist(speciesList)
baseFolder <- '/mnt/research/TIMBER/PVMvsENM/'
setwd('/mnt/research/TIMBER/PVMvsENM')
} else {
evalType <- 'random'
## genus constants ##
genus <- 'fraxinus'
speciesList <- paste0('Fraxinus ',
c('americana', 'caroliniana','cuspidata',
'greggii', 'nigra', 'pennsylvanica',
'profunda', 'quadrangulata'))
gcmList <- c('hadley', 'ccsm', 'ecbilt') # general circulation models for env data
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
}
