rm(list = ls())
library(data.table)
library(xlsx)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
## genus constants ##
genus <- 'fagus'
speciesList <- paste0('Fagus ',
c('grandifolia'))
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
evalType <- 'random'
gcm <- 'ecbilt'
compMetric <- 'jaccard'
library(data.table)
library(xlsx)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
## genus constants ##
genus <- 'fraxinus'
setwd(paste0(baseFolder, genus))
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
evalType <- 'random'
gcm <- 'ecbilt'
compMetric <- 'jaccard'
sheet <- read.xlsx('./pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_jaccard'))
max_index <- which.max(sheet$j)
sheet[99]
sheet[,99]
sheet[99,]
sheet[99,]$threshold
climYears <- seq(0, -21000, by = -1000)
# function for masking pollen model by land & ice #
getPollen <- function(times) {
if(!file.exists(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'))) {
maps <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred.tif'))
### mask by glaciers and available land ###
daltonAges <- read.csv('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/Dalton et al 2020 QSR Dates from Shapefile Names.csv')
# mask by land (for visualization) #
for (countTime in seq_along(times)) {
time <- times[countTime]
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm/tifs/',
-1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
}
### mask by ice (for calculating BV) ###
mapsMasked <- maps
for (countTime in seq_along(times)) {
time <- times[countTime]
# ice mask
closestDalton <- which.min(abs(-1000 * daltonAges$calKiloYear - time))
load(paste0('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/RDA Files/daltonEtAl2020_',
sprintf('%.2f', daltonAges$calKiloYear[closestDalton]), '_kiloCalYBP.rda'))
daltonIce <- sp::spTransform(daltonIce, getCRS('albersNA', TRUE))
daltonIce <- rasterize(daltonIce, maps)
daltonIceMask <- calc(daltonIce, fun=function(x) ifelse(is.na(x), 1, NA))
mapsMasked[[countTime]] <- mapsMasked[[countTime]] * daltonIceMask
}
writeRaster(stack(maps),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_landMask.tif'),
format = 'GTiff', overwrite = T)
writeRaster(stack(mapsMasked),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'),
format = 'GTiff', overwrite = T)
}
return(stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif')))
}
pollenRast <- getPollen(climYears)
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
pollenRast <- brick(pollenRast)
pollenRast <- pollenRast[[1]]
threshold <- sheet[max_index,]$threshold
pollen_refugia <- pollenRast >= threshold
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
plot(pollen_refugia, main = "Pollen refugia", col = colors, axes = F, box = F)
